
	
	type
	bst{
	int a;
	bst left;
	bst right;
	}
	endtype
	
	class
	bstclass{
	decl
	bst root;
	int init();
	bst getroot();
	int setroot(bst n1);
	bst getnode(int key);
	bst insert(bst h, int key);
	int inOrder_fun(bst h);
	int preOrder_fun(bst h);
	int postOrder_fun(bst h);
	enddecl
	int init(){
		decl
		enddecl
	self.root=null;
	return (1);
	}
	bst getroot(){
		decl
		enddecl
	return (self.root);
	}
	int setroot(bst n1){
		decl
		enddecl
	
	self.root=n1;
	return (1);
	}
	bst getnode(int key){
	decl
	bst temp;
	enddecl
	temp=Alloc();
	temp.a=key;
	temp.left=null;
	temp.right=null;
	return (temp);
	}
	
	bst insert(bst h, int key){
		decl
		enddecl
	if (h == null) then
	h = self.getnode(key);
	else
	if (key < h.a) then
	h.left = self.insert(h.left, key);
	else
	if (key > h.a) then
	h.right = self.insert(h.right, key);
	endif;
	endif;
	endif;
	return (h);
	}
	int inOrder_fun(bst h){
	decl
	int in;
	enddecl
	if(h!= null) then
	in=self.inOrder_fun(h.left);
	write(h.a);
	in=self.inOrder_fun(h.right);
	endif;
	return (1);
	}
	
	int preOrder_fun(bst h){
	decl
	int in;
	enddecl
	if(h!= null) then
	write(h.a);
	in=self.preOrder_fun(h.left);
	in=self.preOrder_fun(h.right);
	endif;
	return (1);
	}
	
	int postOrder_fun(bst h){
	decl
	int in;
	enddecl
	
	if(h!= null) then
	in=self.postOrder_fun(h.left);
	in=self.postOrder_fun(h.right);
	write(h.a);
	endif;
	return (1);
	
	}
	}

	endclass
	decl
	bstclass obj;
	enddecl

	int main(){
	decl
	bst Root;
	int x,in,val;
	enddecl
	Heapset();
	obj = new(bstclass);
	x=obj.init();
	read(val);
	Root = obj.getroot();
	while(val!=0) do
	Root = obj.insert(Root,val);
	read(val);
	endwhile;
	x = obj.setroot(Root);
	write("inorder");
	in = obj.inOrder_fun(obj.getroot());
	write("preorder");
	in = obj.preOrder_fun(obj.getroot());
	write("postorder");
	in = obj.postOrder_fun(obj.getroot());
	return (0);
	}